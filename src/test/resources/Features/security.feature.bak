Feature: Security Testing

  Background:
    Given I am on the login page

  @security @authentication
  Scenario: Brute Force Attack Prevention
    Given I am on the login page
    When I attempt to login with invalid credentials 5 times
    Then the account should be temporarily locked
    And I should see an account locked message
    And I should not be able to attempt more logins
    When I wait for 15 minutes
    Then the account should be unlocked
    And I should be able to attempt login again

  @security @authentication
  Scenario: Account Lockout After Multiple Failed Attempts
    Given I am on the login page
    When I enter invalid username and password 3 times
    Then I should see a warning message about account lockout
    When I enter invalid username and password 2 more times
    Then the account should be locked
    And I should see an account locked message
    And I should not be able to attempt more logins

  @security @session
  Scenario: Session Timeout
    Given I am logged in successfully
    When I remain inactive for 30 minutes
    Then my session should expire
    And I should be redirected to the login page
    And I should see a session expired message
    When I try to access the dashboard
    Then I should be redirected to the login page

  @security @session
  Scenario: Concurrent Session Management
    Given I am logged in successfully
    When I open another browser tab and login with the same credentials
    Then the first session should be terminated
    And I should see a session terminated message
    When I try to access the dashboard in the first tab
    Then I should be redirected to the login page

  @security @input-validation
  Scenario: SQL Injection Prevention
    Given I am on the login page
    When I enter SQL injection payload in username field
    And I click the login button
    Then I should see an error message
    And the SQL injection should not be executed
    And the system should remain secure

  @security @input-validation
  Scenario: XSS Prevention
    Given I am on the login page
    When I enter XSS payload in username field
    And I click the login button
    Then I should see an error message
    And the XSS script should not be executed
    And the page should remain secure

  @security @input-validation
  Scenario: Command Injection Prevention
    Given I am on the login page
    When I enter command injection payload in username field
    And I click the login button
    Then I should see an error message
    And the command should not be executed
    And the system should remain secure

  @security @authentication
  Scenario: Password Strength Requirements
    Given I am on the password change page
    When I enter a weak password "123"
    Then I should see a password strength error
    And the password should not be accepted
    When I enter a strong password "Str0ngP@ssw0rd123!"
    Then the password should be accepted
    And I should see a password strength indicator

  @security @authentication
  Scenario: Password History Validation
    Given I am on the password change page
    When I enter a previously used password
    Then I should see a password history error
    And the password should not be accepted
    When I enter a new password that was not used before
    Then the password should be accepted

  @security @authorization
  Scenario: Unauthorized Access Prevention
    Given I am not logged in
    When I try to access the dashboard directly
    Then I should be redirected to the login page
    And I should see an unauthorized access message
    When I try to access user management page directly
    Then I should be redirected to the login page

  @security @authorization
  Scenario: Role-Based Access Control
    Given I am logged in as a regular user
    When I try to access admin-only pages
    Then I should see an access denied message
    And I should be redirected to the dashboard
    When I try to access user management functions
    Then I should see an access denied message

  @security @data-protection
  Scenario: Sensitive Data Encryption
    Given I am viewing user data
    Then sensitive information should be encrypted
    And passwords should be hashed
    And personal data should be masked
    When I export user data
    Then the exported data should be properly secured

  @security @logging
  Scenario: Security Event Logging
    Given I am on the login page
    When I attempt to login with invalid credentials
    Then the failed login attempt should be logged
    And the log should include timestamp
    And the log should include IP address
    And the log should include username attempted
    When I successfully login
    Then the successful login should be logged
    And the log should include user information

  @security @csrf
  Scenario: CSRF Protection
    Given I am logged in successfully
    When I try to submit a form from an external site
    Then the form submission should be rejected
    And I should see a CSRF token error
    And the action should not be performed

  @security @rate-limiting
  Scenario: API Rate Limiting
    Given I am making API requests
    When I make more than 100 requests per minute
    Then my requests should be rate limited
    And I should see a rate limit exceeded message
    And I should wait before making more requests

  @security @file-upload
  Scenario: Malicious File Upload Prevention
    Given I am on the file upload page
    When I try to upload a file with malicious extension
    Then the upload should be rejected
    And I should see a file type error
    When I try to upload a file with malicious content
    Then the upload should be rejected
    And I should see a security error

  @security @logout
  Scenario: Secure Logout
    Given I am logged in successfully
    When I click the logout button
    Then I should be logged out
    And my session should be invalidated
    And I should be redirected to the login page
    When I try to access the dashboard using the back button
    Then I should be redirected to the login page
    And I should not be able to access protected resources

  @security @headers
  Scenario: Security Headers
    Given I am on any page of the application
    Then the page should have proper security headers
    And X-Frame-Options should be set to DENY
    And X-Content-Type-Options should be set to nosniff
    And X-XSS-Protection should be enabled
    And Content-Security-Policy should be configured
    And Strict-Transport-Security should be set

  @security @ssl
  Scenario: SSL/TLS Configuration
    Given I am accessing the application
    Then the connection should use HTTPS
    And the SSL certificate should be valid
    And the SSL configuration should be secure
    And weak ciphers should not be supported
    And the connection should use TLS 1.2 or higher
